{"version":3,"sources":["utils.js","context.js","components/Cell.jsx","components/MinesBoard.jsx","components/Minesweeper.jsx","App.js","reportWebVitals.js","index.js"],"names":["ObjectSet","elem","JSON","stringify","Set","generateGrid","gridSize","mines","grid","i","row","j","push","isMine","placeMine","generateRandomLocation","x","y","isSafeToPlaceMine","countAdjacentMines","filter","val","length","minesboard","Math","floor","random","expandMinesBoardUtil","set","has","add","adjacentMines","value","shown","clearField","size","map","rid","cell","cid","Array","from","expandMinesBoard","getMinesCount","formatTime","time","minutes","seconds","minutesText","secondsText","context","createContext","initialState","marked","won","gameOver","actualMarked","reducer","state","action","type","clearInterval","timer","started","ContextProvider","children","useReducer","dispatch","isGameOver","actions","incrementSize","decrementSize","initializeMinesField","useCallback","markField","actualMark","isMarked","newBoard","newMarked","newActualMarked","useEffect","setInterval","Provider","useStyles","makeStyles","height","width","border","backgroundColor","Cell","useContext","classes","className","onClick","onContextMenu","e","preventDefault","Typography","margin","gridArea","display","gridTemplateColumns","MinesBoard","minesweeper","gridTemplateRows","gap","textAlign","gridTemplateAreas","header","options","justifyItem","restart","total","available","Minesweeper","Dialog","open","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","variant","color","ButtonGroup","disableElevation","fullWidth","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.44705209.chunk.js","sourcesContent":["class ObjectSet extends Set{\n    add(elem){\n      return super.add(typeof elem === 'object' ? JSON.stringify(elem) : elem);\n    }\n    has(elem){\n      return super.has(typeof elem === 'object' ? JSON.stringify(elem) : elem);\n    }\n  }\n\n\nexport const generateGrid = (gridSize, mines) => {\n    const grid = []\n    for (let i = 0; i < gridSize; i++) {\n        let row = []\n        for (let j = 0; j < gridSize; j++) {\n            row.push({\n                isMine: false,\n            })\n        }\n        grid.push(row)\n    }\n    \n    for (let i = 0; i < mines; i++) {\n        placeMine(grid, gridSize);\n    }\n    return grid;\n}\n\nconst placeMine = (grid, gridSize) => {\n    let [x, y] = generateRandomLocation(gridSize)\n\n    while(!isSafeToPlaceMine(grid, gridSize, x, y)) {\n        [x, y] = generateRandomLocation(gridSize)\n    }\n    grid[x][y].isMine = true\n        \n}\n\n\n\nconst isSafeToPlaceMine = (grid, gridSize, x, y) => {\n    if(isMine(grid, gridSize, x, y)) {\n        return false\n    }\n    return countAdjacentMines(grid, gridSize, x, y) !== 8;\n}\n\n\nexport const countAdjacentMines = (grid, gridSize, x, y) => {\n    return [\n        isMine(grid, gridSize, x + 1, y),\n        isMine(grid, gridSize, x - 1, y),\n        isMine(grid, gridSize, x, y + 1),\n        isMine(grid, gridSize, x, y - 1),\n        isMine(grid, gridSize, x - 1, y - 1),\n        isMine(grid, gridSize, x - 1, y + 1),\n        isMine(grid, gridSize, x + 1, y - 1),\n        isMine(grid, gridSize, x + 1, y  + 1)\n    ].filter(val => val).length\n}\n\nexport const isMine = (minesboard, gridSize, x, y) => {\n    if(x < 0 || x >= gridSize || y < 0 || y >= gridSize) {\n        return false;\n    }\n\n    return minesboard[x][y].isMine\n}\n\nconst generateRandomLocation = gridSize => [\n    Math.floor(Math.random() * gridSize), Math.floor(Math.random() * gridSize)]\n\n\nexport const expandMinesBoard = (minesboard, gridSize, x, y) => {\n    let set = new ObjectSet()\n    set.add([x, y])\n    minesboard[x][y].value = 0\n    minesboard[x][y].shown = true\n    \n    expandMinesBoardUtil(minesboard, gridSize, x + 1, y - 1, set)\n    expandMinesBoardUtil(minesboard, gridSize, x + 1, y, set)\n    expandMinesBoardUtil(minesboard, gridSize, x + 1, y + 1, set)\n    expandMinesBoardUtil(minesboard, gridSize, x - 1, y - 1, set)\n    expandMinesBoardUtil(minesboard, gridSize, x - 1, y, set)\n    expandMinesBoardUtil(minesboard, gridSize, x - 1, y + 1, set)\n    expandMinesBoardUtil(minesboard, gridSize, x, y - 1, set)\n    expandMinesBoardUtil(minesboard, gridSize, x, y + 1, set)\n\n    return Array.from(minesboard)\n\n}\n\nconst expandMinesBoardUtil = (minesboard, gridSize, x, y, set) => {\n    if(x < 0 || x >= gridSize || y < 0 || y >= gridSize) {\n        return\n    }\n\n    if(set.has([x, y])) {\n        return;\n    }\n\n    set.add([x, y])\n\n    const adjacentMines = countAdjacentMines(minesboard, gridSize, x, y)\n    minesboard[x][y].value = adjacentMines\n    minesboard[x][y].shown = true\n\n    if(minesboard[x][y].value === 0) {\n        expandMinesBoardUtil(minesboard, gridSize, x + 1, y - 1, set)\n        expandMinesBoardUtil(minesboard, gridSize, x + 1, y, set)\n        expandMinesBoardUtil(minesboard, gridSize, x + 1, y + 1, set)\n        expandMinesBoardUtil(minesboard, gridSize, x - 1, y - 1, set)\n        expandMinesBoardUtil(minesboard, gridSize, x - 1, y, set)\n        expandMinesBoardUtil(minesboard, gridSize, x - 1, y + 1, set)\n        expandMinesBoardUtil(minesboard, gridSize, x, y - 1, set)\n        expandMinesBoardUtil(minesboard, gridSize, x, y + 1, set)\n    }\n    return;\n}\n\nexport const clearField = (minesboard, size, x, y) => {\n    const adjacentMines = countAdjacentMines(minesboard, size, x, y)\n    let newBoard;\n\n    if(adjacentMines) {\n        newBoard = minesboard.map((row, rid) => {\n            if(rid !== x) {\n                return row;\n            }\n            return row.map((cell, cid) => {\n                if(cid !== y) {\n                    return cell\n                }\n                return {\n                    ...cell,\n                    shown: true,\n                    value: adjacentMines\n                }\n            })\n        })\n    } else {\n        newBoard = expandMinesBoard(minesboard, size, x, y)\n    }\n    return newBoard\n}\n\nexport const markField = (minesboard, marked, actualMark, x, y) => {\n    return [minesboard.map((row, rid) => {\n        if(rid !== x) {\n            return row;\n        }\n        return row.map((cell, cid) => {\n            if(cid !== y) {\n                return cell\n            }\n            cell.isMarked ? marked-- : marked++\n            if(cell.isMine) {\n                if(cell.isMarked) {\n                    actualMark--\n                }\n                actualMark++\n            }\n            return {\n                ...cell,\n                isMarked: !cell.isMarked\n            }\n        })\n    }), marked, actualMark]\n}\n\nexport const getMinesCount = size => Math.floor(size * size * 0.15) \n\n\nexport const formatTime = time => {\n    if(!time) {\n        return '0 Second'\n    }\n\n    const minutes = Math.floor(time / 60)\n    const seconds = time % 60\n    let minutesText = ''\n    let secondsText = ''\n    if(minutes) {\n        minutesText = minutes === 1 ? '1 Minute' : `${minutes} Minutes`\n        minutesText += ' and '\n    }\n\n    if(seconds) {\n        secondsText = seconds === 1 ? '1 Second': `${seconds} Seconds`\n    }\n\n    return minutesText + secondsText\n}","import { createContext, useReducer, useCallback, useEffect } from 'react'\nimport { generateGrid, isMine, clearField, markField, getMinesCount } from './utils';\n\n\n\nconst context = createContext()\n\nconst initialState = {\n    minesboard: [],\n    size: 20,\n    marked: 0,\n    time: 0,\n    won: false,\n    gameOver: false,\n    actualMarked: 0,\n    mines: getMinesCount(20),\n}\n\nconst reducer = (state, action) => {\n    switch(action.type) {\n        case \"initialize\":\n            clearInterval(state.timer)\n            return {\n                ...initialState,\n                size: state.size,\n                mines: getMinesCount(state.size),\n                minesboard: generateGrid(state.size, getMinesCount(state.size)),\n\n            }\n        case \"incrementSize\":\n            return {\n                ...state,\n                size: state.size + 1,\n            }\n        case \"decrementSize\":\n            return {\n                ...state,\n                size: state.size - 1,\n            }\n\n        case \"updateBoard\":\n            return {\n                ...state,\n                minesboard: action.minesboard\n            }\n\n        case \"updateMark\":\n            return {\n                ...state,\n                marked: action.marked,\n                actualMarked: action.actualMarked\n            }\n\n        case 'gameOver':\n            clearInterval(state.timer)\n            return {\n                ...state,\n                gameOver: true\n            }\n        \n        case 'won':\n            clearInterval(state.timer)\n            return {\n                ...state,\n                won: true\n            }\n\n        case 'started':\n            return {\n                ...state,\n                started: true\n            }\n\n        case 'setTimer': \n            return {\n                ...state,\n                timer: action.timer\n            }\n        \n\n        case 'tick': \n            return {\n                ...state,\n                time: state.time + 1\n            }\n\n        default:\n            return state\n    }\n}\n\n\n\n\nexport const ContextProvider = ({children}) => {\n\n\n    const [state, dispatch] = useReducer(reducer, initialState)\n    const { minesboard, size, started, isGameOver, marked, actualMarked, mines, won } = state\n    const actions = {\n        incrementSize: () => dispatch({type: 'incrementSize'}),\n\n        decrementSize: () => dispatch({type: 'decrementSize'}),\n\n        initializeMinesField: useCallback(() => dispatch({type: 'initialize'}), []),\n\n        clearField: (x, y) => {\n            if(minesboard[x][y].shown || isGameOver || won) {\n                return;\n            }\n\n            if(isMine(minesboard, size, x, y)) {\n                dispatch({type: 'gameOver'})\n                return;\n            }\n\n            if(!started) {\n                dispatch({type: 'started'})\n            }\n            \n            dispatch({\n                type: 'updateBoard',\n                minesboard: clearField(minesboard, size, x, y)\n            })\n        },\n\n        markField: (x, y) => {\n            if(minesboard[x][y].shown || isGameOver || won) {\n                return;\n            }\n            if(!started) {\n                dispatch({type: 'started'})\n            }\n            const [newBoard, newMarked, newActualMarked] = markField(minesboard, marked, actualMarked, x, y)\n            dispatch({\n                type: 'updateBoard',\n                minesboard: newBoard\n            })\n\n            dispatch({\n                type: 'updateMark',\n                marked: newMarked,\n                actualMarked: newActualMarked\n            })\n        }\n    }\n\n    useEffect(() => {\n        dispatch({type: 'initialize'})\n    }, [size])\n\n    useEffect(() => {\n        if(actualMarked === mines) {\n            dispatch({type: 'won'})\n        }\n    }, [actualMarked, mines])\n\n    useEffect(() => {\n        if(started) {\n            const timer = setInterval(() => dispatch({type: 'tick'}), 1000)\n            dispatch({\n                type: 'setTimer',\n                timer\n            })\n        }\n    }, [started])\n\n    return (\n        <context.Provider value={{\n            state,\n            actions\n        }}>\n            \n            {children}\n        </context.Provider>\n    )\n}\nexport default context","import { makeStyles, Typography } from \"@material-ui/core\"\nimport { useContext } from \"react\"\nimport context from \"../context\"\n\nconst getColor = ({cell, gameOver}) => {\n    if(cell.isMine && gameOver) {\n        return '#ff9595'\n    }\n    if(cell.isMarked) {\n        return '#f7bba1'\n    }\n    if(cell.shown) {\n        return '#e7e6f7'\n    }\n    return '#dbdaf7'\n}\n\nconst useStyles = makeStyles({\n    cell: {\n        height: 25,\n        width: 25,\n        border: '1px solid gray',   \n        backgroundColor: getColor\n    },\n})\n\nconst Cell = ({cell, clearField, markField}) => {\n    const { state } = useContext(context)\n    const { gameOver } = state\n    const classes = useStyles({cell, gameOver})\n\n\n    const mark = (e) => {\n        e.preventDefault()\n        markField()\n    }\n    const showValue = () => {\n        if(gameOver) {\n            if(cell.isMine) {\n                return '🔴'\n            }\n        }\n        if(cell.isMarked) {\n            return '🚩'\n        }\n        if(cell.value === 0) {\n            return ''\n        }\n        return cell.value\n    }\n\n    return (\n        <div className={classes.cell} onClick={clearField} onContextMenu={mark}>\n            <Typography>{showValue()}</Typography>\n        </div>\n    )\n}\n\nexport default Cell","import { makeStyles } from \"@material-ui/styles\";\nimport { useContext } from \"react\";\nimport context from \"../context\";\nimport Cell from \"./Cell\";\n\nconst useStyles = makeStyles({\n    minesboard: {\n        margin: '0 auto',\n        gridArea:'minesboard',\n        height: ({size}) => size * 25 + 2,\n        width: ({size}) => size * 25 + 2,\n        border: '1px solid black',\n        display: 'grid',\n        gridTemplateColumns: ({size}) => `repeat(${size}, auto)`\n    }\n})\n\nconst MinesBoard = () => {\n    const { state, actions } = useContext(context)\n    const { minesboard, size } = state\n    const { clearField, markField } = actions\n    const createCells = () => {\n        return minesboard.map((row, rid) => {\n            return row.map((cell, cid) => (\n                <Cell \n                    key={`cell-${rid}-${cid}`} \n                    cell={cell} \n                    clearField={() => clearField(rid, cid)} \n                    markField={() => markField(rid, cid)}/>\n            ))\n        })\n    }\n    const classes = useStyles({size})\n    return (\n        <div className={classes.minesboard}>\n            {createCells()}\n        </div>\n    )\n}\n\nexport default MinesBoard;","import { useContext, useEffect } from \"react\"\nimport { Button, ButtonGroup, makeStyles, Typography, Dialog, DialogTitle, DialogActions, DialogContent, DialogContentText } from '@material-ui/core'\nimport context from \"../context\"\nimport MinesBoard from \"./MinesBoard\"\nimport { formatTime } from \"../utils\"\n\nconst useStyles = makeStyles({\n    minesweeper: {\n        display: 'grid',\n        width: 800,\n        margin: '0 auto',\n        gridTemplateColumns: \"repeat(2, auto) 200px\",\n        gridTemplateRows: \"20px auto auto 50px auto\",\n        gap: 20,\n        textAlign: 'center',\n        gridTemplateAreas:`\n        \". . .\"\n        \". header .\"\n        \". options restart\"\n        \"total available time\"\n        \"minesboard minesboard minesboard\"\n        `\n\n    },\n\n    header: {\n        gridArea: 'header'\n    },\n\n    options: {\n        gridArea: 'options',\n    },\n\n    time: {\n        gridArea: 'time',\n        justifyItem: 'center'\n    },\n\n    restart: {\n        gridArea: 'restart'\n    },\n\n    total: {\n        gridArea: 'total'\n    },\n\n    available: {\n        gridArea: 'available'\n    }\n})\n\nconst Minesweeper = () => {\n    const {actions, state} = useContext(context)\n\n    const { incrementSize, decrementSize, initializeMinesField } = actions\n    useEffect(initializeMinesField, [initializeMinesField])\n    const classes = useStyles()\n    const { size, mines, marked, time, won, started } = state\n    return (\n        <>\n            <Dialog open={won}>\n                <DialogTitle>You Won</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                    Well Done. You won the game in {formatTime(time)}.\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button variant=\"outlined\" color=\"primary\" onClick={initializeMinesField}>Restart</Button>\n                </DialogActions>\n            </Dialog>\n            <div className={classes.minesweeper}>\n                <Typography className={classes.header} variant=\"h3\">Minesweeper</Typography>\n                <ButtonGroup\n                    disableElevation \n                    fullWidth\n                    className={classes.options} \n                    variant=\"contained\" \n                    color=\"primary\" \n                >\n                    <Button onClick={incrementSize}>+</Button>\n                    <Button >{size} X {size}</Button>\n                    <Button onClick={decrementSize}>-</Button>\n                </ButtonGroup>\n\n                <Button \n                    fullWidth\n                    className={classes.restart} \n                    variant=\"outlined\" \n                    color=\"primary\" \n                    onClick={initializeMinesField}>Restart</Button>\n                <Typography className={classes.total}>Total Mines: {mines}</Typography>\n                <Typography className={classes.available}>Available Mines: {mines - marked}</Typography>\n                <Typography className={classes.time}>\n                    {started ? formatTime(time) : 'Click on tile start timer'}\n                </Typography>\n                <MinesBoard/>\n            </div>\n        </>\n    )\n}\n\nexport default Minesweeper","import Minesweeper from './components/Minesweeper'\nimport { ContextProvider } from './context'\n\nfunction App() {\n  return (\n     <ContextProvider>\n       <Minesweeper />\n     </ContextProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}